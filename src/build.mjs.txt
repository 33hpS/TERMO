import { build } from 'esbuild'
import pkg from 'esbuild-style-plugin'
const { stylePlugin } = pkg
import { rimraf } from 'rimraf'
import path from 'path'
import fs from 'fs'

const isProduction = process.argv.includes('--production')

// –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
const distDir = path.resolve(process.cwd(), 'dist')
if (fs.existsSync(distDir)) {
  rimraf.sync(distDir)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
fs.mkdirSync(distDir, { recursive: true })

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const copyStaticFiles = () => {
  const publicDir = path.resolve(process.cwd(), 'public')
  if (fs.existsSync(publicDir)) {
    fs.cpSync(publicDir, distDir, { recursive: true })
  }
  
  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ index.html
  const htmlContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏ —Ç–µ—Ä–º–æ—ç—Ç–∏–∫–µ—Ç–æ–∫</title>
    <meta name="description" content="–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–µ—á–∞—Ç–∏ —Ç–µ—Ä–º–æ—ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è –º–µ–±–µ–ª–∏ –≤–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã">
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div id="app"></div>
    <script src="/js/main.js"></script>
</body>
</html>`
  
  fs.writeFileSync(path.join(distDir, 'index.html'), htmlContent)
}

copyStaticFiles()

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏
const buildConfig = {
  entryPoints: ['src/main.tsx'],
  bundle: true,
  minify: isProduction,
  sourcemap: !isProduction,
  target: 'es2017',
  platform: 'browser',
  format: 'esm',
  splitting: true,
  outdir: path.join(distDir, 'js'),
  define: {
    'process.env.NODE_ENV': isProduction ? '"production"' : '"development"'
  },
  plugins: [
    stylePlugin({
      postcss: {
        plugins: [
          require('tailwindcss'),
          require('autoprefixer')
        ]
      }
    })
  ],
  loader: {
    '.tsx': 'tsx',
    '.ts': 'tsx',
    '.js': 'jsx',
    '.svg': 'dataurl',
    '.png': 'dataurl',
    '.jpg': 'dataurl',
    '.jpeg': 'dataurl',
    '.gif': 'dataurl'
  },
  resolveExtensions: ['.tsx', '.ts', '.jsx', '.js', '.json']
}

// –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function runBuild() {
  try {
    console.log('üöÄ Building application...')
    await build(buildConfig)
    console.log('‚úÖ Build completed successfully!')
    
    if (isProduction) {
      console.log('üì¶ Production build ready for deployment!')
    } else {
      console.log('üîß Development build completed!')
    }
  } catch (error) {
    console.error('‚ùå Build failed:', error)
    process.exit(1)
  }
}

runBuild()